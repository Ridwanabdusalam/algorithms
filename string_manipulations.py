# -*- coding: utf-8 -*-
"""playground_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kz3u8K3AafxKCJXHdvMEZxUNO8X2roKY
"""

#1.Given a string, return the string made of its first two chars, so the String "Hello" yields "He". If the string is shorter than length 2, return whatever there is, so "X" yields "X", and the empty string "" yields the empty string "".

def first_two(input_string):
  print(input_string[:2])

first_two('Hello')# → 'He'

first_two('abcdefg')# → 'ab'

first_two('ab')# → 'ab'

#2.Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.
def extra_end(input_string):
  print(input_string[-2:]*3)

extra_end('Hello')# →'lololo'

extra_end('ab')# → 'ababab'

extra_end('Hi')# → 'HiHiHi'

#3. Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".
def first_half(input_string):
  print(input_string[:len(input_string)//2])

first_half('WooHoo')# → 'Woo'

first_half('HelloThere')# → 'Hello'

first_half('abcdef')# → 'abc'

#4. Given a string, return a version without the first and last char, so "Hello" yields "ell". The string length will be at least 2.

def without_end(input_string):
  div2 = input_string[1:]
  input_string = div2[:len(div2)-1]
  print(input_string)


without_end('Hello')# → 'ell'

without_end('java')# → 'av'

without_end('coding')# → 'odin'

#5. Given two strings, a and b, return the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".

def make_abba(string1, string2):
  comb_one = string1+string2
  comb_two = string2+string1
  print(comb_one+comb_two)

make_abba('Hi', 'Bye') #→ 'HiByeByeHi'
make_abba('Yo', 'Alice') #→ 'YoAliceAliceYo'
make_abba('What', 'Up') #→ 'WhatUpUpWhat'

#6. Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).

def combo_string(string_one, string_two):
  if len(string_one) > len(string_two):
    comb_one = string_two+string_one
    comb_two = comb_one+string_two
  else:
    comb_one = string_one+string_two
    comb_two = comb_one+string_one
  print(comb_two)


combo_string('Hello', 'hi') # → 'hiHellohi'
combo_string('hi', 'Hello') #→ 'hiHellohi'
combo_string('aaa', 'b') #→ 'baaab'

#7. Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.

#non_start('Hello', 'There') → 'ellohere'
def non_start(string1, string2):
  string1 = string1[1:]
  string2 = string2[1:]
  print(string1+string2)

non_start('Hello', 'There') #→ 'ellohere'
non_start('java', 'code') #→ 'avaode'
non_start('shotl', 'java') #→ 'hotlava'

#8. Given a string, return a "rotated left 2" version where the first 2 chars are moved to the end. The string length will be at least 2.

def left2(input_string):
  if len(input_string) > 2:
    first_half = input_string[:len(input_string)//2]
    second_half = input_string[len(input_string)//2:]
    roteted_string = second_half+first_half
  else:
    roteted_string = input_string
  print(roteted_string)

left2('Hello')# → 'lloHe'
left2('java') #→ 'vaja'
left2('Hi') #→ 'Hi'